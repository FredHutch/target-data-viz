merged_cts <- column_to_rownames(merged_cts, "Row.names")
merged_cts <- merge(merged_cts, NBM_cts, by = "row.names")
View(CDE)
hmMatrix <- merged_cts
# Applying scale normalization to the counts using the TMM normalization method.
# Calculates norm factor for each sample/patient and adds it to the filtered DGEList object
hmMatrix <- edgeR::DGEList(counts = hmMatrix)
hmMatrix <- edgeR::calcNormFactors(hmMatrix, method = "TMM")
hmMatrix <- edgeR::cpm(hmMatrix, normalized.lib.sizes = T, log = T)
# Calculating variance for each gene
vars <- apply(hmMatrix, 1, var)
vars <- sort(vars, decreasing = T)
# hmMatrix <- log2(hmMatrix + 1) # Not needed when using log2 CPM, as the CPM function can perform this step
hmMatrix <- as.data.frame(t(scale(t(hmMatrix), center = T, scale = T))) # Scaling to create Z-scores
hmMatrix <- hmMatrix[names(vars)[1:n_genes],] # Filtering to only retain top N most variable genes
#Here we sort to make sure they are aligned
CDE <- CDE[intersect(colnames(hmMatrix), CDE$USI),]
hmMatrix_sorted <- hmMatrix[,CDE$USI]
View(cts)
View(hmMatrix)
View(merged_cts)
merged_cts <- column_to_rownames(merged_cts, "Row.names")
hmMatrix <- merged_cts
# Applying scale normalization to the counts using the TMM normalization method.
# Calculates norm factor for each sample/patient and adds it to the filtered DGEList object
hmMatrix <- edgeR::DGEList(counts = hmMatrix)
hmMatrix <- edgeR::calcNormFactors(hmMatrix, method = "TMM")
hmMatrix <- edgeR::cpm(hmMatrix, normalized.lib.sizes = T, log = T)
# Calculating variance for each gene
vars <- apply(hmMatrix, 1, var)
vars <- sort(vars, decreasing = T)
# hmMatrix <- log2(hmMatrix + 1) # Not needed when using log2 CPM, as the CPM function can perform this step
hmMatrix <- as.data.frame(t(scale(t(hmMatrix), center = T, scale = T))) # Scaling to create Z-scores
hmMatrix <- hmMatrix[names(vars)[1:n_genes],] # Filtering to only retain top N most variable genes
#Here we sort to make sure they are aligned
CDE <- CDE[intersect(colnames(hmMatrix), CDE$USI),]
hmMatrix_sorted <- hmMatrix[,CDE$USI]
identical(CDE$USI, colnames(hmMatrix_sorted))
# Import the CDE file
CDE <- read_xlsx(file.path(LAB_DIR, "scripts/lwallac2/R/RUNX1-RUNX1T1_ASH/All_RBD_sequencing_files.xlsx"))
# Filter for just the patients we are interested in
CDE <- subset(CDE, Time_point == "NBM" | Primary.Fusion == "RUNX1-RUNX1T1") # There are 84 NBM Samples and it looks like many are in replicate
table(CDE$Time_point)
# Let's restrict these patients to just diagnostic, relapse or NBM samples
CDE <- subset(CDE, Time_point %in% c("NBM", "diagnostic", "relapse"))
# Let's remove anything with replicate in the name so that we do not have too many replicates skewing our analysis
CDE <- CDE[-grep("replicate", CDE$Sample), ]
#grep("replicate", CDE$Sample)
table(CDE$Time_point)
NR_cts <- cts
# Let's remove anything that is a replicate
NR_cts <- NR_cts[,-grep("replicate", names(NR_cts))]
# Separate the diagnostic and NBM samples
NBM_cts <- cts[,grep("\\.14A", names(cts))] # .14A will be either EOI or Normal
NR_cts <- cts[,grep("\\.09A", names(cts))] # .09 will be diagnostic bone marrow
R_cts <- cts[,grep("\\.04A", names(cts))] # .04 will be relapse bone marrow
# Extract the USI from the names of the counts file
colnames(NR_cts) <- sub(pattern = "TARGET.20.", replacement = "", colnames(NR_cts))
colnames(NR_cts) <- sub(pattern = "TARGET.00.", replacement = "", colnames(NR_cts))
# Leave just the USI and remove the other identifier information
colnames(NR_cts) <- gsub(pattern = "\\..*", replacement = "", colnames(NR_cts))
# Do the same for the Relapse counts
colnames(R_cts) <- sub(pattern = "TARGET.20.", replacement = "", colnames(R_cts))
colnames(R_cts) <- sub(pattern = "TARGET.00.", replacement = "", colnames(R_cts))
# Leave just the USI and remove the other identifier information
colnames(R_cts) <- gsub(pattern = "\\..*", replacement = "", colnames(R_cts))
# Do the same for the NBM samples
colnames(NBM_cts) <- sub(pattern = "TARGET.20.", replacement = "", colnames(NBM_cts))
colnames(NBM_cts) <- sub(pattern = "TARGET.00.", replacement = "", colnames(NBM_cts))
# Leave just the USI and remove the other identifier information
colnames(NBM_cts) <- gsub(pattern = "\\..*", replacement = "", colnames(NBM_cts))
# Trim each set of counts for only those that are in the CDE file of NBM and RUNX samples
R_cts <- R_cts[,names(R_cts) %in% CDE$USI]
NR_cts <- NR_cts[,names(NR_cts) %in% CDE$USI]
NBM_cts <- NBM_cts[,names(NBM_cts) %in% CDE$USI]
# remove duplicates from the NBM samples
NBM_cts <- NBM_cts[,-grep("\\.", names(NBM_cts))]
# Now merge all our counts together and call it merged counts
merged_cts <- merge(NR_cts, R_cts, by = "row.names")
merged_cts <- column_to_rownames(merged_cts, "Row.names")
merged_cts <- merge(merged_cts, NBM_cts, by = "row.names")
merged_cts <- column_to_rownames(merged_cts, "Row.names")
CDE <- CDE[intersect(colnames(hmMatrix), CDE$USI),]
hmMatrix_sorted <- hmMatrix[,CDE$USI]
identical(CDE$USI, colnames(hmMatrix_sorted))
View(R_cts)
colnames(R_cts) <- paste(colnames(R_cts), "Relapse", sep = "_")
colnames(NR_cts) <- paste(colnames(NR_cts), "Diagnostic", sep = "_")
colnames(NBM_cts) <- paste(colnames(NBM_cts), "NBM", sep = "_")
# Import the CDE file
CDE <- read_xlsx(file.path(LAB_DIR, "scripts/lwallac2/R/RUNX1-RUNX1T1_ASH/All_RBD_sequencing_files.xlsx"))
# Filter for just the patients we are interested in
CDE <- subset(CDE, Time_point == "NBM" | Primary.Fusion == "RUNX1-RUNX1T1") # There are 84 NBM Samples and it looks like many are in replicate
table(CDE$Time_point)
# Let's restrict these patients to just diagnostic, relapse or NBM samples
CDE <- subset(CDE, Time_point %in% c("NBM", "diagnostic", "relapse"))
# Let's remove anything with replicate in the name so that we do not have too many replicates skewing our analysis
CDE <- CDE[-grep("replicate", CDE$Sample), ]
#grep("replicate", CDE$Sample)
table(CDE$Time_point)
NR_cts <- cts
# Let's remove anything that is a replicate
NR_cts <- NR_cts[,-grep("replicate", names(NR_cts))]
# Separate the diagnostic and NBM samples
NBM_cts <- cts[,grep("\\.14A", names(cts))] # .14A will be either EOI or Normal
NR_cts <- cts[,grep("\\.09A", names(cts))] # .09 will be diagnostic bone marrow
R_cts <- cts[,grep("\\.04A", names(cts))] # .04 will be relapse bone marrow
# Extract the USI from the names of the counts file
colnames(NR_cts) <- sub(pattern = "TARGET.20.", replacement = "", colnames(NR_cts))
colnames(NR_cts) <- sub(pattern = "TARGET.00.", replacement = "", colnames(NR_cts))
# Leave just the USI and remove the other identifier information
colnames(NR_cts) <- gsub(pattern = "\\..*", replacement = "", colnames(NR_cts))
# Do the same for the Relapse counts
colnames(R_cts) <- sub(pattern = "TARGET.20.", replacement = "", colnames(R_cts))
colnames(R_cts) <- sub(pattern = "TARGET.00.", replacement = "", colnames(R_cts))
# Leave just the USI and remove the other identifier information
colnames(R_cts) <- gsub(pattern = "\\..*", replacement = "", colnames(R_cts))
# Do the same for the NBM samples
colnames(NBM_cts) <- sub(pattern = "TARGET.20.", replacement = "", colnames(NBM_cts))
colnames(NBM_cts) <- sub(pattern = "TARGET.00.", replacement = "", colnames(NBM_cts))
# Leave just the USI and remove the other identifier information
colnames(NBM_cts) <- gsub(pattern = "\\..*", replacement = "", colnames(NBM_cts))
# Trim each set of counts for only those that are in the CDE file of NBM and RUNX samples and append to the names in each file
R_cts <- R_cts[,names(R_cts) %in% CDE$USI]
colnames(R_cts) <- paste(colnames(R_cts), "Relapse", sep = "_")
NR_cts <- NR_cts[,names(NR_cts) %in% CDE$USI]
colnames(NR_cts) <- paste(colnames(NR_cts), "Diagnostic", sep = "_")
NBM_cts <- NBM_cts[,names(NBM_cts) %in% CDE$USI]
colnames(NBM_cts) <- paste(colnames(NBM_cts), "NBM", sep = "_")
# remove duplicates from the NBM samples
NBM_cts <- NBM_cts[,-grep("\\.", names(NBM_cts))]
# Now merge all our counts together and call it merged counts
merged_cts <- merge(NR_cts, R_cts, by = "row.names")
merged_cts <- column_to_rownames(merged_cts, "Row.names")
merged_cts <- merge(merged_cts, NBM_cts, by = "row.names")
merged_cts <- column_to_rownames(merged_cts, "Row.names")
View(merged_cts)
View(CDE)
unique(CDE$USI)
length(unique(CDE$USI))
length(unique(CDE$USI))
length(CDE$USI)
duplicates <- which(duplicated(CDE$USI))
duplicates
ls
duplicates
CDE$USI[duplicates]
duplicatesUSIs <- CDE$USI[duplicates]
duplicates <- subset(CDE, USI %in% duplicatesUSIs)
view(duplicates)
length(duplicates$Time_point == "relapse")
length(which(duplicates$Time_point == "relapse"))
View(merged_cts)
View(CDE)
# Apply the name changes to the CDE file as well
CDE <- CDE %>% mutate(Time_point = case_when(
Time_point == "diagnostic" ~ "Diagnostic",
Time_point == "relapse" ~ "Relapse",
TRUE ~ "NBM"))
CDE <- CDE %>% mutate('Rows' = paste(USI, Time_point, sep = "_"))
CDE <- column_to_rownames('Rows')
CDE <- column_to_rownames(CDE, 'Rows')
# Now merge all our counts together and call it merged counts
merged_cts <- merge(NR_cts, R_cts, by = "row.names")
merged_cts <- column_to_rownames(merged_cts, "Row.names")
merged_cts <- merge(merged_cts, NBM_cts, by = "row.names")
merged_cts <- column_to_rownames(merged_cts, "Row.names")
View(merged_cts)
hmMatrix <- merged_cts
# Applying scale normalization to the counts using the TMM normalization method.
# Calculates norm factor for each sample/patient and adds it to the filtered DGEList object
hmMatrix <- edgeR::DGEList(counts = hmMatrix)
hmMatrix <- edgeR::calcNormFactors(hmMatrix, method = "TMM")
hmMatrix <- edgeR::cpm(hmMatrix, normalized.lib.sizes = T, log = T)
# Calculating variance for each gene
vars <- apply(hmMatrix, 1, var)
vars <- sort(vars, decreasing = T)
# hmMatrix <- log2(hmMatrix + 1) # Not needed when using log2 CPM, as the CPM function can perform this step
hmMatrix <- as.data.frame(t(scale(t(hmMatrix), center = T, scale = T))) # Scaling to create Z-scores
hmMatrix <- hmMatrix[names(vars)[1:n_genes],] # Filtering to only retain top N most variable genes
#Here we sort to make sure they are aligned
CDE <- CDE[intersect(colnames(hmMatrix), rownames(CDE)),]
hmMatrix_sorted <- hmMatrix[,rownames(CDE)]
identical(rownames(CDE), colnames(hmMatrix_sorted))
relapse_colors <- c(
"NBM" = "blue",
"Diagnostic" = "green",
"Relapse" = "red"
)
relapse_colors <- c(
"NBM" = "blue",
"Diagnostic" = "green",
"Relapse" = "red"
)
ha <- HeatmapAnnotation(df = CDE,
annotation_name_side = "left",
annotation_height = unit(2, "cm"),
simple_anno_size_adjust = T,
col = list(`Time_point` = relapse_colors)
)
#Remember to change your heatmaps name here!
heatmap <- Heatmap(matrix = as.matrix(hmMatrix),
column_title = paste0("Unsupervised Clustering of 263 t(8;21) Patients and NBM samples"),
row_title = "Genes",
col = circlize::colorRamp2(breaks = c(-4, -2, 0, 2, 4),
colors = c("deepskyblue3", "deepskyblue","white", "red", "red3"),
space = "sRGB"),
name = "Z-Scores",
top_annotation = ha,
show_row_names = T,
row_labels = rownames(hmMatrix),
row_names_gp = gpar(fontsize = 1),
column_names_gp = gpar(fontsize = 2),
show_column_names = T,
row_dend_reorder = T,
column_dend_reorder = T,
#column_km = 2,
show_row_dend = F)
View(merged_cts)
# Import the CDE file
CDE <- read_xlsx(file.path(LAB_DIR, "scripts/lwallac2/R/RUNX1-RUNX1T1_ASH/All_RBD_sequencing_files.xlsx"))
# Filter for just the patients we are interested in
CDE <- subset(CDE, Time_point == "NBM" | Primary.Fusion == "RUNX1-RUNX1T1") # There are 84 NBM Samples and it looks like many are in replicate
table(CDE$Time_point)
# Let's restrict these patients to just diagnostic, relapse or NBM samples
CDE <- subset(CDE, Time_point %in% c("NBM", "diagnostic", "relapse"))
# Let's remove anything with replicate in the name so that we do not have too many replicates skewing our analysis
CDE <- CDE[-grep("replicate", CDE$Sample), ]
#grep("replicate", CDE$Sample)
table(CDE$Time_point)
NR_cts <- cts
# Let's remove anything that is a replicate
NR_cts <- NR_cts[,-grep("replicate", names(NR_cts))]
# Separate the diagnostic and NBM samples
NBM_cts <- cts[,grep("\\.14A", names(cts))] # .14A will be either EOI or Normal
NR_cts <- cts[,grep("\\.09A", names(cts))] # .09 will be diagnostic bone marrow
R_cts <- cts[,grep("\\.04A", names(cts))] # .04 will be relapse bone marrow
# Extract the USI from the names of the counts file
colnames(NR_cts) <- sub(pattern = "TARGET.20.", replacement = "", colnames(NR_cts))
colnames(NR_cts) <- sub(pattern = "TARGET.00.", replacement = "", colnames(NR_cts))
# Leave just the USI and remove the other identifier information
colnames(NR_cts) <- gsub(pattern = "\\..*", replacement = "", colnames(NR_cts))
# Do the same for the Relapse counts
colnames(R_cts) <- sub(pattern = "TARGET.20.", replacement = "", colnames(R_cts))
colnames(R_cts) <- sub(pattern = "TARGET.00.", replacement = "", colnames(R_cts))
# Leave just the USI and remove the other identifier information
colnames(R_cts) <- gsub(pattern = "\\..*", replacement = "", colnames(R_cts))
# Do the same for the NBM samples
colnames(NBM_cts) <- sub(pattern = "TARGET.20.", replacement = "", colnames(NBM_cts))
colnames(NBM_cts) <- sub(pattern = "TARGET.00.", replacement = "", colnames(NBM_cts))
# Leave just the USI and remove the other identifier information
colnames(NBM_cts) <- gsub(pattern = "\\..*", replacement = "", colnames(NBM_cts))
# Trim each set of counts for only those that are in the CDE file of NBM and RUNX samples and append to the names in each file
R_cts <- R_cts[,names(R_cts) %in% CDE$USI]
colnames(R_cts) <- paste(colnames(R_cts), "Relapse", sep = "_")
NR_cts <- NR_cts[,names(NR_cts) %in% CDE$USI]
colnames(NR_cts) <- paste(colnames(NR_cts), "Diagnostic", sep = "_")
NBM_cts <- NBM_cts[,names(NBM_cts) %in% CDE$USI]
colnames(NBM_cts) <- paste(colnames(NBM_cts), "NBM", sep = "_")
# remove duplicates from the NBM samples
NBM_cts <- NBM_cts[,-grep("\\.", names(NBM_cts))]
# Apply the name changes to the CDE file as well
CDE <- CDE %>% mutate(Time_point = case_when(
Time_point == "diagnostic" ~ "Diagnostic",
Time_point == "relapse" ~ "Relapse",
TRUE ~ "NBM"))
CDE <- CDE %>% mutate('Rows' = paste(USI, Time_point, sep = "_"))
CDE <- column_to_rownames(CDE, 'Rows')
# Now merge all our counts together and call it merged counts
merged_cts <- merge(NR_cts, R_cts, by = "row.names")
merged_cts <- column_to_rownames(merged_cts, "Row.names")
merged_cts <- merge(merged_cts, NBM_cts, by = "row.names")
merged_cts <- column_to_rownames(merged_cts, "Row.names")
#Remember to change your heatmaps name here!
heatmap <- Heatmap(matrix = as.matrix(hmMatrix_sorted),
column_title = paste0("Unsupervised Clustering of 263 t(8;21) Patients and NBM samples"),
row_title = "Genes",
col = circlize::colorRamp2(breaks = c(-4, -2, 0, 2, 4),
colors = c("deepskyblue3", "deepskyblue","white", "red", "red3"),
space = "sRGB"),
name = "Z-Scores",
top_annotation = ha,
show_row_names = T,
row_labels = rownames(hmMatrix_sorted),
row_names_gp = gpar(fontsize = 1),
column_names_gp = gpar(fontsize = 2),
show_column_names = T,
row_dend_reorder = T,
column_dend_reorder = T,
#column_km = 2,
show_row_dend = F)
#clustering_method_columns = "ward.D2",
#clustering_method_rows = "ward.D2")
heatmap
#Remember to change your heatmaps name here!
heatmap <- Heatmap(matrix = as.matrix(hmMatrix_sorted),
column_title = paste0("Unsupervised Clustering of 263 t(8;21) Patients and NBM samples"),
row_title = "Genes",
col = circlize::colorRamp2(breaks = c(-4, -2, 0, 2, 4),
colors = c("deepskyblue3", "deepskyblue","white", "red", "red3"),
space = "sRGB"),
name = "Z-Scores",
#top_annotation = ha,
show_row_names = T,
row_labels = rownames(hmMatrix_sorted),
row_names_gp = gpar(fontsize = 1),
column_names_gp = gpar(fontsize = 2),
show_column_names = T,
row_dend_reorder = T,
column_dend_reorder = T,
#column_km = 2,
show_row_dend = F)
#clustering_method_columns = "ward.D2",
#clustering_method_rows = "ward.D2")
heatmap
pdf(file.path(LAB_DIR, "scripts/lwallac2/R/RUNX1-RUNX1T1_ASH/Images/RUNX1_NBM_Unsupervised_500_Heatmap"), width = 12, height = 9)
heatmap
dev.off()
hmMatrix <- merged_cts
# Applying scale normalization to the counts using the TMM normalization method.
# Calculates norm factor for each sample/patient and adds it to the filtered DGEList object
hmMatrix <- edgeR::DGEList(counts = hmMatrix)
hmMatrix <- edgeR::calcNormFactors(hmMatrix, method = "TMM")
hmMatrix <- edgeR::cpm(hmMatrix, normalized.lib.sizes = T, log = T)
# Calculating variance for each gene
vars <- apply(hmMatrix, 1, var)
vars <- sort(vars, decreasing = T)
# hmMatrix <- log2(hmMatrix + 1) # Not needed when using log2 CPM, as the CPM function can perform this step
hmMatrix <- as.data.frame(t(scale(t(hmMatrix), center = T, scale = T))) # Scaling to create Z-scores
hmMatrix <- hmMatrix[names(vars)[1:n_genes],] # Filtering to only retain top N most variable genes
#Here we sort to make sure they are aligned
CDE <- CDE[intersect(colnames(hmMatrix), rownames(CDE)),]
hmMatrix_sorted <- hmMatrix[,rownames(CDE)]
identical(rownames(CDE), colnames(hmMatrix_sorted))
150+71+41
relapse_colors <- c(
"NBM" = "blue",
"Diagnostic" = "green",
"Relapse" = "red"
)
ha <- HeatmapAnnotation(df = CDE,
annotation_name_side = "left",
annotation_height = unit(2, "cm"),
simple_anno_size_adjust = T,
col = list(`Time_point` = relapse_colors)
)
#Remember to change your heatmaps name here!
heatmap <- Heatmap(matrix = as.matrix(hmMatrix_sorted),
column_title = paste0("Unsupervised Clustering of 258 t(8;21) Patients and NBM samples"),
row_title = "Genes",
col = circlize::colorRamp2(breaks = c(-4, -2, 0, 2, 4),
colors = c("deepskyblue3", "deepskyblue","white", "red", "red3"),
space = "sRGB"),
name = "Z-Scores",
top_annotation = ha,
show_row_names = T,
row_labels = rownames(hmMatrix_sorted),
row_names_gp = gpar(fontsize = 1),
column_names_gp = gpar(fontsize = 2),
show_column_names = T,
row_dend_reorder = T,
column_dend_reorder = T,
#column_km = 2,
show_row_dend = F)
#clustering_method_columns = "ward.D2",
#clustering_method_rows = "ward.D2")
heatmap
pdf(file.path(LAB_DIR, "scripts/lwallac2/R/RUNX1-RUNX1T1_ASH/Images/test.pdf"), width = 12, height = 9)
heatmap
dev.off()
ha <- HeatmapAnnotation(df = CDE,
annotation_name_side = "left",
annotation_height = unit(2, "cm"),
simple_anno_size_adjust = T,
col = Time_point = relapse_colors)
ha <- HeatmapAnnotation(df = CDE,
annotation_name_side = "left",
annotation_height = unit(2, "cm"),
simple_anno_size_adjust = T,
col = list(Time_point = relapse_colors)
)
ha <- HeatmapAnnotation(df = CDE,
annotation_name_side = "left",
simple_anno_size_adjust = T,
col = list(Time_point = relapse_colors)
)
#Remember to change your heatmaps name here!
heatmap <- Heatmap(matrix = as.matrix(hmMatrix_sorted),
column_title = paste0("Unsupervised Clustering of 258 t(8;21) Patients and NBM samples"),
row_title = "Genes",
col = circlize::colorRamp2(breaks = c(-4, -2, 0, 2, 4),
colors = c("deepskyblue3", "deepskyblue","white", "red", "red3"),
space = "sRGB"),
name = "Z-Scores",
top_annotation = ha,
show_row_names = T,
row_labels = rownames(hmMatrix_sorted),
row_names_gp = gpar(fontsize = 1),
column_names_gp = gpar(fontsize = 2),
show_column_names = T,
row_dend_reorder = T,
column_dend_reorder = T,
#column_km = 2,
show_row_dend = F)
#clustering_method_columns = "ward.D2",
#clustering_method_rows = "ward.D2")
heatmap
#Remember to change your heatmaps name here!
heatmap <- Heatmap(matrix = as.matrix(hmMatrix_sorted),
column_title = paste0("Unsupervised Clustering of 258 t(8;21) Patients and NBM samples"),
row_title = "Genes",
col = circlize::colorRamp2(breaks = c(-4, -2, 0, 2, 4),
colors = c("deepskyblue3", "deepskyblue","white", "red", "red3"),
space = "sRGB"),
name = "Z-Scores",
top_annotation = ha,
#show_row_names = T,
#row_labels = rownames(hmMatrix_sorted),
row_names_gp = gpar(fontsize = 1),
column_names_gp = gpar(fontsize = 2),
show_column_names = T,
row_dend_reorder = T,
column_dend_reorder = T,
#column_km = 2,
show_row_dend = F)
#clustering_method_columns = "ward.D2",
#clustering_method_rows = "ward.D2")
heatmap
View(hmMatrix_sorted)
View(hmMatrix_sorted)
#Remember to change your heatmaps name here!
heatmap <- Heatmap(matrix = as.matrix(hmMatrix_sorted),
column_title = paste0("Unsupervised Clustering of 258 t(8;21) Patients and NBM samples"),
row_title = "Genes",
col = circlize::colorRamp2(breaks = c(-4, -2, 0, 2, 4),
colors = c("deepskyblue3", "deepskyblue","white", "red", "red3"),
space = "sRGB"),
name = "Z-Scores",
top_annotation = ha,
show_row_names = T,
row_labels = rownames(hmMatrix_sorted),
row_names_gp = gpar(fontsize = 1),
column_names_gp = gpar(fontsize = 2),
show_column_names = T,
row_dend_reorder = T,
column_dend_reorder = T,
column_km = 2,
show_row_dend = F)
#clustering_method_columns = "ward.D2",
#clustering_method_rows = "ward.D2")
heatmap
View(hmMatrix_sorted)
View(hmMatrix_sorted)
View(CDE)
knitr::opts_chunk$set(echo = FALSE)
if (grepl("gizmo", Sys.info()[4])) {
LAB_DIR <- file.path("/fh/fast/meshinchi_s/")
HOME_DIR <- "~"
} else {
LAB_DIR <- file.path("/Volumes/fh/fast/meshinchi_s/workingDir")
HOME_DIR <- file.path("/Volumes/homes")
}
library(tidyverse)
library(survival)
library(ranger)
library(ggfortify)
library(readxl)
library(knitr)
library(kableExtra)
library(DESeq2)
library(ComplexHeatmap)
library(EnhancedVolcano)
setwd("/Volumes/fh/fast/meshinchi_s/workingDir/scripts/lwallac2/R/ALL_to_Shiny/target-data-viz")
shiny::runApp()
install.packages(viridis)
"viridis"
install.packages("viridis")
shiny::runApp()
runApp()
library(tidyverse)
runApp()
library(tidyverse)
library(shiny)
library(shinyalert)
library(shinydashboard)
library(shinythemes)
library(shinyWidgets)
library(shinyjs)
library(shinyBS)
library(data.table)
library(DT)
library(viridis)
library(viridisLite)
library(ggplot2)
library(plotly)
library(fst)
runApp()
runApp()
setwd("/Volumes/fh/fast/meshinchi_s/workingDir/scripts/lwallac2/R/ALL_to_Shiny/target-data-viz")
runApp()
stjude_expData <<- readRDS("data/mRNA/St_Jude_Expression_Data_TPM_filt4dupGenes_FinalforShiny_1.RDS")
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = FALSE)
if (grepl("gizmo", Sys.info()[4])) {
LAB_DIR <- file.path("/fh/fast/meshinchi_s/")
HOME_DIR <- "~"
} else {
LAB_DIR <- file.path("/Volumes/fh/fast/meshinchi_s/workingDir")
HOME_DIR <- file.path("/Volumes/homes")
}
