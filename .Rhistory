grep("ADAMTSL4", rownames(trimmed_results))
grep("ADAMTSL4-A", rownames(trimmed_results))
rownames(trimmed_results)[15966] <- "ADAMTSL4.A"
grep("ADAMTSL4.A", rownames(trimmed_results))
grep("C21ORF", rownames(trimmed_results))
grep("C210RF", rownames(trimmed_results))
View(DGE_Results)
setwd("/Volumes/fh/fast/meshinchi_s/workingDir/scripts/lwallac2/R/RUNX1-RUNX1T1_ASH/Data")
View(runxRBD)
library(readxl)
DGE_Results <- read_excel("RUNX1-RUNXT1_DGE_Results.xlsx")
View(DGE_Results)
names(DGE_Results)[1] <- "Gene"
which(covariates %in% DGE_Results$Gene)
length(which(covariates %in% DGE_Results$Gene))
grep("ETV3", DGE_Results$Gene)
covariates
covariates <- c("PRDM8", "RARG", "CSF1", "PDE4B", "CCL3", "NAB1", "WHRN", "SGSM1", "LPIN3", "CHARLIE1B", "SATB1", "ZNF441", "ZNF521", "AL451123.1", "TSPYL4", "B3GNT5", "CXCL3", "C21ORF91", "EREG", "CXCL2", "CD69", "ADAMTSL4.A", "TMEM70", "SPRY1", "SCARNA7", "CXCL8", "MZT1", "MIR3141", "ETV3")
length(covariates)
library(readxl)
RUNX1_RUNXT1_DGE_Results <- read_excel("RUNX1-RUNXT1_DGE_Results.xlsx")
View(RUNX1_RUNXT1_DGE_Results)
names(DGE_Results)[1] <- "Gene"
DGE_Results <- RUNX1_RUNXT1_DGE_Results
names(DGE_Results)[1] <- "Gene"
DGE_Results <- subset(DGE_Results, DGE_Results$...1 %in% c("PRDM8", "RARG", "CSF1", "PDE4B", "CCL3", "NAB1", "WHRN", "SGSM1", "LPIN3", "CHARLIE1B", "SATB1", "ZNF441", "ZNF521", "AL451123.1", "TSPYL4", "B3GNT5", "CXCL3", "C21ORF91", "EREG", "CXCL2", "CD69", "ADAMTSL4.A", "TMEM70", "SPRY1", "SCARNA7", "CXCL8", "MZT1", "MIR3141", "ETV3", "RNU6.33P"))
DGE_Results <- subset(DGE_Results, DGE_Results$Gene %in% c("PRDM8", "RARG", "CSF1", "PDE4B", "CCL3", "NAB1", "WHRN", "SGSM1", "LPIN3", "CHARLIE1B", "SATB1", "ZNF441", "ZNF521", "AL451123.1", "TSPYL4", "B3GNT5", "CXCL3", "C21ORF91", "EREG", "CXCL2", "CD69", "ADAMTSL4.A", "TMEM70", "SPRY1", "SCARNA7", "CXCL8", "MZT1", "MIR3141", "ETV3", "RNU6.33P"))
View(DGE_Results)
which(covariates %in% DGE_Results$Gene)
covariates[11]
covariates[13]
covariates[18]
covariates[22]
covariates[28]
covariates[30]
covariates[0]
length(covariates)
covariates <- c("PRDM8", "RARG", "CSF1", "PDE4B", "CCL3", "NAB1", "WHRN", "SGSM1", "LPIN3", "CHARLIE1B", "SATB1", "ZNF441", "ZNF521", "AL451123.1", "TSPYL4", "B3GNT5", "CXCL3", "C21ORF91", "EREG", "CXCL2", "CD69", "ADAMTSL4.A", "TMEM70", "SPRY1", "SCARNA7", "CXCL8", "MZT1", "MIR3141", "ETV3", "RNU6.33P")
length(covariates)
covariates <- c("PRDM8", "RARG", "CSF1", "PDE4B", "CCL3", "NAB1", "WHRN", "SGSM1", "LPIN3", "CHARLIE1B", "SATB1", "ZNF441", "ZNF521", "AL451123.1", "TSPYL4", "B3GNT5", "CXCL3", "C21orf91", "EREG", "CXCL2", "CD69", "ADAMTSL4.A", "TMEM70", "SPRY1", "SCARNA7", "CXCL8", "MZT1", "MIR3141", "ETV3")
which(covariates %in% DGE_Results$Gene)
length(which(covariates %in% DGE_Results$Gene))
covariates <- c("PRDM8", "RARG", "CSF1", "PDE4B", "CCL3", "NAB1", "WHRN", "SGSM1", "LPIN3", "CHARLIE1B", "SATB1", "ZNF441", "ZNF521", "AL451123.1", "TSPYL4", "B3GNT5", "CXCL3", "C21orf91", "EREG", "CXCL2", "CD69", "ADAMTSL4.AS1", "TMEM70", "SPRY1", "SCARNA7", "CXCL8", "MZT1", "MIR3142", "ETV3", "RNU6.33P"
)
length(covariates)
covariates <- c("PRDM8", "RARG", "CSF1", "PDE4B", "CCL3", "NAB1", "WHRN", "SGSM1", "LPIN3", "CHARLIE1B", "SATB1", "ZNF441", "ZNF521", "AL451123.1", "TSPYL4", "B3GNT5", "CXCL3", "C21orf91", "EREG", "CXCL2", "CD69", "ADAMTSL4.AS1", "TMEM70", "SPRY1", "SCARNA7", "CXCL8", "MZT1", "MIR3142", "ETV3", "RNU6.33P")
library(readxl)
DGE_Results <- read_excel("RUNX1-RUNXT1_DGE_Results.xlsx")
View(DGE_Results)
DGE_Results <- subset(DGE_Results, DGE_Results$Gene %in% c("PRDM8", "RARG", "CSF1", "PDE4B", "CCL3", "NAB1", "WHRN", "SGSM1", "LPIN3", "CHARLIE1B", "SATB1", "ZNF441", "ZNF521", "AL451123.1", "TSPYL4", "B3GNT5", "CXCL3", "C21orf91", "EREG", "CXCL2", "CD69", "ADAMTSL4.AS1", "TMEM70", "SPRY1", "SCARNA7", "CXCL8", "MZT1", "MIR3142", "ETV3", "RNU6.33P"))
View(DGE_Results)
covariates <- c("PRDM8", "RARG", "CSF1", "PDE4B", "CCL3", "NAB1", "WHRN", "SGSM1", "LPIN3", "CHARLIE1B", "SATB1", "ZNF441", "ZNF521", "AL451123.1", "TSPYL4", "B3GNT5", "CXCL3", "C21orf91", "EREG", "CXCL2", "CD69", "ADAMTSL4.AS1", "TMEM70", "SPRY1", "SCARNA7", "CXCL8", "MZT1", "MIR3142", "ETV3", "RNU6.33P", "DPEP3")
knitr::opts_chunk$set(echo = FALSE)
if (grepl("gizmo", Sys.info()[4])) {
LAB_DIR <- file.path("/fh/fast/meshinchi_s/")
HOME_DIR <- "~"
} else {
LAB_DIR <- file.path("/Volumes/fh/fast/meshinchi_s/workingDir")
HOME_DIR <- file.path("/Volumes/homes")
}
library(tidyverse)
library(readxl)
# Import the clinical data elements for the patients which have been sequenced
CDE <- read_xlsx(file.path(LAB_DIR, "scripts/lwallac2/Python/PacBio_LR_Initial_Investigation/CDE_LR_Variants.xlsx"))
# Import the clinical data elements for the patients which have been sequenced
CDE <- read_xlsx(file.path(LAB_DIR, "scripts/lwallac2/Python/PacBio_LR_Initial_Investigation/CDE_LR_Variants.xlsx"))
# Import the clinical data elements for the patients which have been sequenced
CDE <- read_xlsx(file.path(LAB_DIR, "scripts/lwallac2/Python/PacBio_LR_Initial_Investigation/PacBio_LR_PBSV_Patient_CDE.xlsx"))
CDE <- column_to_rownames(CDE, var = "Updated USI")
View(CDE)
CDE <- column_to_rownames(CDE, var = "USI")
RNA_Variants <- read_xlsx(file.path(LAB_DIR, "scripts/lwallac2/Python/PacBio_LR_Initial_Investigation/Concatenated_VCFs.xlsx"), sheet = "concatenated")
View(RNA_Variants)
unique(RNA_Variants$Variant_Type)
# There are a total of 60,000+ variants total so we need to count how many of each variety for each patient
# Add some columns to the CDE to count the number of variants
CDE <- CDE[, 'rna_ins', 'rna_dup', 'rna_bnd_inter', 'rna_del', 'rna_bnd_intra', 'rna_inv']
CDE <- CDE[, 'rna_ins', 'rna_dup', 'rna_bnd_inter', 'rna_del', 'rna_bnd_intra', 'rna_inv'] = NA
# There are a total of 60,000+ variants total so we need to count how many of each variety for each patient
# Add some columns to the CDE to count the number of variants
CDE[, 'rna_ins', 'rna_dup', 'rna_bnd_inter', 'rna_del', 'rna_bnd_intra', 'rna_inv'] = NA
# There are a total of 60,000+ variants total so we need to count how many of each variety for each patient
# Add some columns to the CDE to count the number of variants
CDE[, c('rna_ins', 'rna_dup', 'rna_bnd_inter', 'rna_del', 'rna_bnd_intra', 'rna_inv')] = NA
View(CDE)
View(RNA_Variants)
knitr::opts_chunk$set(echo = FALSE)
if (grepl("gizmo", Sys.info()[4])) {
LAB_DIR <- file.path("/fh/fast/meshinchi_s/")
HOME_DIR <- "~"
} else {
LAB_DIR <- file.path("/Volumes/fh/fast/meshinchi_s/workingDir")
HOME_DIR <- file.path("/Volumes/homes")
}
# Import the potential somatic variants
our_vars <- read_xlsx(file.path(LAB_DIR, "/Volumes/fh/fast/meshinchi_s/workingDir/scripts/lwallac2/Python/PacBio_LR_Initial_Investigation/trimmed_variantts.xlsx"))
library(tidyverse)
library(readxl)
# Import the potential somatic variants
our_vars <- read_xlsx(file.path(LAB_DIR, "/Volumes/fh/fast/meshinchi_s/workingDir/scripts/lwallac2/Python/PacBio_LR_Initial_Investigation/trimmed_variantts.xlsx"))
# Import the potential somatic variants
our_vars <- read_xlsx(file.path(LAB_DIR, "scripts/lwallac2/Python/PacBio_LR_Initial_Investigation/trimmed_variantts.xlsx"))
# Import the potential somatic variants
our_vars <- read_xlsx(file.path(LAB_DIR, "scripts/lwallac2/Python/PacBio_LR_Initial_Investigation/trimmed_variants.xlsx"))
# Import Xiaotu's calls
xiaotu_calls <- read_xlxs(file.path(LAB_DIR, "scripts/lwallac2/Python/PacBio_LR_Initial_Investigation/Xiaotu_Calls.xlsx"), sheet = "mutations")
# Import Xiaotu's calls
xiaotu_calls <- read_xlsx(file.path(LAB_DIR, "scripts/lwallac2/Python/PacBio_LR_Initial_Investigation/Xiaotu_Calls.xlsx"), sheet = "mutations")
# First, find the overlap between the patients
overlap <- which(our_vars$USI %in% xiaotu_calls$USI)
overlap
# First, find the overlap between the patients
overlap <- unique(which(our_vars$USI %in% xiaotu_calls$USI))
overlap
us <- unique(our_vars$USI)
xia <- unique(xiaotu_calls$USI)
overlap <- which(us %in% xia)
View(xiaotu_calls)
View(our_vars)
# It looks like there are 26 individuals which overlap our calls and xiaotu's calls so let's trim for that list
xiaotu_calls <- subset(xiaotu_calls, which(xiaotu_calls$USI %in% overlap))
# It looks like there are 26 individuals which overlap our calls and xiaotu's calls so let's trim for that list
xiaotu_calls <- xiaotu_calls[rownames(xiaotu_calls$USI) %in% overlap, ]
xiaotu_calls[1,2]
rownames(xiaotu_calls)
# It looks like there are 26 individuals which overlap our calls and xiaotu's calls so let's trim for that list
xiaotu_calls <- xiaotu_calls[xiaotu_calls$USI %in% overlap, ]
View(xiaotu_calls)
# It looks like there are 26 individuals which overlap our calls and xiaotu's calls so let's trim for that list
xiaotu_calls <- xiaotu_calls %> filter(USI %in% overlap)
# It looks like there are 26 individuals which overlap our calls and xiaotu's calls so let's trim for that list
xiaotu_calls <- xiaotu_calls %>% filter(USI %in% overlap)
# Import the potential somatic variants
our_vars <- read_xlsx(file.path(LAB_DIR, "scripts/lwallac2/Python/PacBio_LR_Initial_Investigation/trimmed_variants.xlsx"))
# Import Xiaotu's calls
xiaotu_calls <- read_xlsx(file.path(LAB_DIR, "scripts/lwallac2/Python/PacBio_LR_Initial_Investigation/Xiaotu_Calls.xlsx"), sheet = "mutations")
# First, find the overlap between the patients
us <- unique(our_vars$USI)
xia <- unique(xiaotu_calls$USI)
overlap <- which(us %in% xia)
# It looks like there are 26 individuals which overlap our calls and xiaotu's calls so let's trim for that list
xiaotu_calls <- xiaotu_calls %>% filter(USI %in% overlap)
# Are these calls from WGS alone?
View(xiaotu_calls)
overlap <- us %in% xia
overlap <- us(which(us %in% xia))
overlap <- us[which(us %in% xia)]
# Import the potential somatic variants
our_vars <- read_xlsx(file.path(LAB_DIR, "scripts/lwallac2/Python/PacBio_LR_Initial_Investigation/trimmed_variants.xlsx"))
# Import Xiaotu's calls
xiaotu_calls <- read_xlsx(file.path(LAB_DIR, "scripts/lwallac2/Python/PacBio_LR_Initial_Investigation/Xiaotu_Calls.xlsx"), sheet = "mutations")
# First, find the overlap between the patients
us <- unique(our_vars$USI)
xia <- unique(xiaotu_calls$USI)
overlap <- us[which(us %in% xia)]
# It looks like there are 26 individuals which overlap our calls and xiaotu's calls so let's trim for that list
xiaotu_calls <- xiaotu_calls %>% filter(USI %in% overlap)
# Are these calls from WGS alone?
View(xiaotu_calls)
# Check to make sure all those USI's made it
length(unique(xiaotu_calls$USI))
View(xiaotu_calls)
# Are these calls from WGS alone? It's hard to say and Xiaotu's sheet and verbage isn't clear, worth clarifying with him after I align thesse calls
# Find the overlap between Xiaotu calls and our calls
# Match the USI and Gene first
matched_calls <- merge(our_vars, xiaotu_calls, by.x = c("USI", "Gene"), by.y = c("USI", "Gene"), all = FALSE)
View(matched_calls)
# What are our most frequently mutated genes
table(our_vars$Gene)
# What are our most frequently mutated genes
order(table(our_vars$Gene))
# What are our most frequently mutated genes
table(our_vars$Gene)
knitr::opts_chunk$set(echo = FALSE)
if (grepl("gizmo", Sys.info()[4])) {
LAB_DIR <- file.path("/fh/fast/meshinchi_s/")
HOME_DIR <- "~"
} else {
LAB_DIR <- file.path("/Volumes/fh/fast/meshinchi_s/workingDir")
HOME_DIR <- file.path("/Volumes/homes")
}
cicero <- read_excel(file.path(LAB_DIR, "scripts/lwallac2/R/Variable_Junction_Analysis/Copy of Hutch_v5_send_fusions_with_exon_breakpoints.xlsx"))
knitr::opts_chunk$set(echo = FALSE)
if (grepl("gizmo", Sys.info()[4])) {
LAB_DIR <- file.path("/fh/fast/meshinchi_s/")
HOME_DIR <- "~"
} else {
LAB_DIR <- file.path("/Volumes/fh/fast/meshinchi_s/workingDir")
HOME_DIR <- file.path("/Volumes/homes")
}
library(tidyverse)
library(readxl)
cicero <- read_excel(file.path(LAB_DIR, "scripts/lwallac2/R/Variable_Junction_Analysis/Copy of Hutch_v5_send_fusions_with_exon_breakpoints.xlsx"))
# Are all of these calls for single patients / samples?
length(unique(cicero$USI))
# Import the CDE to see which cohort these patients fall into
CDE <- read_xlsx(file.path(LAB_DIR, "scripts/lwallac2/Python/PacBio_LR_Initial_Investigation/CDE_LR_Variants.xlsx"))
merged <- merge(cicero, CDE, by = "USI")
View(merged)
View(cicero)
View(CDE)
knitr::opts_chunk$set(echo = FALSE)
if (grepl("gizmo", Sys.info()[4])) {
LAB_DIR <- file.path("/fh/fast/meshinchi_s/")
HOME_DIR <- "~"
} else {
LAB_DIR <- file.path("/Volumes/fh/fast/meshinchi_s/workingDir")
HOME_DIR <- file.path("/Volumes/homes")
}
library(tidyverse)
library(readxl)
# Open the CDE and sort for KMT2A rearranged AML
CDE <- read_xlsx(file.path(LAB_DIR, "scripts/lwallac2/Python/PacBio_LR_Initial_Investigation/CDE_LR_Variants.xlsx"))
TPM <- readRDS(file.path(LAB_DIR, "scripts/lwallac2/Data/PacBio_LR_Initial_Investigation/TARGET_AML_RBD_Dx_Rlps_NBM_MPN_JMML_APL_DS_MDAnderson_Kallisto_Quant_GeneLevel_dupGenesRemoved_Abundance_TPM.RDS"))
# Open the read counts and explore the LAMP5 expression in those individuals
TPM <- readRDS(file.path(LAB_DIR, "scripts/lwallac2/Data/TARGET_AML_RBD_Dx_Rlps_NBM_MPN_JMML_APL_DS_MDAnderson_Kallisto_Quant_GeneLevel_dupGenesRemoved_Abundance_TPM.RDS"))
CDE <- CDE[grepl("KMT2A-", CDE$`Primary Fusion`),]
View(CDE)
View(CDE)
CDE <- read_xlsx(file.path(LAB_DIR, "scripts/lwallac2/Python/PacBio_LR_Initial_Investigation/CDE_LR_Variants.xlsx"))
# Open the CDE and sort for KMT2A rearranged AML
CDE <- read_xlsx(file.path(LAB_DIR, "scripts/lwallac2/Data/TARGETClinicalDataEl_DATA_LABELS_2022-03-30_1445_new_strata_variants_113022_CBF_GLIS_updated_USIs_added_MYC_042123.xlsb.xlsx"))
CDE <- CDE[grepl("KMT2A-", CDE$`Primary Fusion`),]
View(CDE)
View(TPM)
TPM <- column_to_rownames(TPM, "gene_id")
TPM <- TPM[LAMP5,]
TPM <- TPM["LAMP5",]
View(TPM)
TPM <- readRDS(file.path(LAB_DIR, "scripts/lwallac2/Data/TARGET_AML_RBD_Dx_Rlps_NBM_MPN_JMML_APL_DS_MDAnderson_Kallisto_Quant_GeneLevel_dupGenesRemoved_Abundance_TPM.RDS"))
TPM <- column_to_rownames(TPM, "gene_name")
View(TPM)
TPM <- TPM["LAMP5",]
View(TPM)
# Get the range for LAMP5 expression
range(TPM)
View(merged)
View(TPM)
TPM <- TPM[-c("gene_id"),]
View(TPM)
TPM <- TPM[,-c("gene_id")]
TPM <- TPM[,"gene_id"]
TPM <- TPM[,-"gene_id"]
TPM <- TPM[,-c("gene_id")]
TPM <- readRDS(file.path(LAB_DIR, "scripts/lwallac2/Data/TARGET_AML_RBD_Dx_Rlps_NBM_MPN_JMML_APL_DS_MDAnderson_Kallisto_Quant_GeneLevel_dupGenesRemoved_Abundance_TPM.RDS"))
TPM <- column_to_rownames(TPM, "gene_name")
TPM <- TPM["LAMP5",]
# Remove the gene_id col
TPM <- TPM[, -1]
# Get the range for LAMP5 expression
range(TPM)
# Arrange the TPM dataframe by LAMP5 expression
TPM <- arrange(TPM, desc(TPM$LAMP5))
View(TPM)
View(TPM)
View(CDE)
packageVersion("blogdown")
install.packages("blogdown")
knitr::opts_chunk$set(echo = FALSE)
if (grepl("gizmo", Sys.info()[4])) {
LAB_DIR <- file.path("/fh/fast/meshinchi_s/")
HOME_DIR <- "~"
} else {
LAB_DIR <- file.path("/Volumes/fh/fast/meshinchi_s/workingDir")
HOME_DIR <- file.path("/Volumes/homes")
}
library(knitr)
library(XML)
library(DT)
library(tidyverse)
# Display the packages and versions which are used in this project
sessionInfo()
# Load a single XML file as a list
clin_trials <- xmlToList(file.path(LAB_DIR, "scripts/shared/lwallac2_jpeplins/Shiny_Backend_Drug_Repurposing/AllPublicXML/NCT0052xxxx/NCT00520000.xml"))
# Our list is nested, flatten it.
# So beyond the XML files being entirely separate each other, they do not like to load directly into R. The XML file structure is nested such that, when trying to generate a dataframe from it produces many duplicate column names. We can get around this by flattening the list, however, we need to do it more than once, but fewer than recursively because it will not then convert to a full dataframe. Doing it twice works to make the conversion.
clin_trials <- unlist(clin_trials, recursive = FALSE)
clin_trials <- unlist(clin_trials, recursive = FALSE)
# Convert to a dataframe
clin_trials <- as.data.frame(clin_trials)
# # View as an interactive table
# datatable(clin_trials, option = list(pageLength = 5))
head(clin_trials)
# This is what we want! Now to find out how to loop through all the XML files and get them to append to this dataframe...
### PSUEDO CODE ###
# 1. Create a nested list by first identifying all folders in the directory and then finding all XML files within each folder
# 2. Loop through each folder and each XML file within each folder and read in the XML files as above. Flattening and converting to a dataframe
# 3. Append each dataframe to a master dataframe
# 4. Save the master dataframe as a CSV file that we can use as a backend for our shiny app
# Navigate to the directory and create a list of all folders and files in that directory
# There are a whole lot of folders so this takes a bit - Searching through everything recursively took far too long, let's find a new method.
all_folders <- list.dirs("/Volumes/fh/fast/meshinchi_s/workingDir/scripts/shared/lwallac2_jpeplins/Shiny_Backend_Drug_Repurposing/AllPublicXML/", full.names = FALSE, recursive = FALSE)
# Now, loop through each folder and find all the XML files within, storing them as a nested list
all_files <- lapply(all_folders, function(x) list.files(file.path("/Volumes/fh/fast/meshinchi_s/workingDir/scripts/shared/lwallac2_jpeplins/Shiny_Backend_Drug_Repurposing/AllPublicXML/", x), full.names = FALSE))
# That was a lot quicker!
# Loop through our list, reading in each XML file and appending it to a master dataframe
master_df <- clin_trials
for (folder in 1:length(all_folders)) {
for (xml in 1:length(all_files[[folder]])) {
# Load the XML file
clin_trials <- xmlToList(file.path(LAB_DIR, "scripts/shared/lwallac2_jpeplins/Shiny_Backend_Drug_Repurposing/AllPublicXML/", all_folders[[folder]], all_files[[folder]][xml]))
# Flatten the list
clin_trials <- unlist(clin_trials, recursive = TRUE)
# Make a list once again
clin_trials <- as.list(clin_trials)
# Flatten the list
# while(any(sapply(clin_trials, is.list))) {
#   clin_trials <- unlist(clin_trials, recursive = FALSE)
# }
# Convert to a dataframe
clin_trials <- as.data.frame(clin_trials)
# Append to the master dataframe
master_df <- bind_rows(master_df, clin_trials)
}
}
View(master_df)
version
master_df <- clin_trials
for (folder in 1:length(all_folders)) {
for (xml in 1:length(all_files[[folder]])) {
# Load the XML file
clin_trials <- xmlToList(file.path(LAB_DIR, "scripts/shared/lwallac2_jpeplins/Shiny_Backend_Drug_Repurposing/AllPublicXML/", all_folders[[folder]], all_files[[folder]][xml]))
# Flatten the list
clin_trials <- unlist(clin_trials, recursive = TRUE)
# Make a list once again
clin_trials <- as.list(clin_trials)
# Flatten the list
# while(any(sapply(clin_trials, is.list))) {
#   clin_trials <- unlist(clin_trials, recursive = FALSE)
# }
# Convert to a dataframe
clin_trials <- as.data.frame(clin_trials)
# Append to the master dataframe
master_df <- bind_rows(master_df, clin_trials)
}
}
knitr::opts_chunk$set(echo = FALSE)
if (grepl("gizmo", Sys.info()[4])) {
LAB_DIR <- file.path("/fh/fast/meshinchi_s/")
HOME_DIR <- "~"
} else {
LAB_DIR <- file.path("/Volumes/fh/fast/meshinchi_s/workingDir")
HOME_DIR <- file.path("/Volumes/homes")
}
# Import the clinical data elements
CDE <- read_xlsx(file.path(LAB_DIR, "scripts/lwallac2/Data/TARGETClinicalDataEl_DATA_LABELS_2022-03-30_1445_new_strata_variants_113022_CBF_GLIS_updated_USIs_added_MYC_042123.xlsb.xlsx"))
library(tidyverse)
library(readxl)
library(xlsx)
# Import the clinical data elements
CDE <- read_xlsx(file.path(LAB_DIR, "scripts/lwallac2/Data/TARGETClinicalDataEl_DATA_LABELS_2022-03-30_1445_new_strata_variants_113022_CBF_GLIS_updated_USIs_added_MYC_042123.xlsb.xlsx"))
# Import the clinical data elements
CDE <- read.xlsx(file.path(LAB_DIR, "scripts/lwallac2/Data/TARGETClinicalDataEl_DATA_LABELS_2022-03-30_1445_new_strata_variants_113022_CBF_GLIS_updated_USIs_added_MYC_042123.xlsb.xlsx"))
# Import the clinical data elements
CDE <- read_xlsx(file.path(LAB_DIR, "scripts/lwallac2/Data/TARGETClinicalDataEl_DATA_LABELS_2022-03-30_1445_new_strata_variants_113022_CBF_GLIS_updated_USIs_added_MYC_042123.xlsb.xlsx"))
knitr::opts_chunk$set(echo = FALSE)
if (grepl("gizmo", Sys.info()[4])) {
LAB_DIR <- file.path("/fh/fast/meshinchi_s/")
HOME_DIR <- "~"
} else {
LAB_DIR <- file.path("/Volumes/fh/fast/meshinchi_s/workingDir")
HOME_DIR <- file.path("/Volumes/homes")
}
library(tidyverse)
library(readxl)
library(xlsx)
# Import the clinical data elements
CDE <- read_xlsx(file.path(LAB_DIR, "/scripts/Common_Data/TARGETClinicalDataEl_DATA_LABELS_2022-03-30_1445_updated_Jan2024_w_1831_proposed_changes.xlsx"))
# Import the gene expression data
ctsTPM <- readRDS(file.path(LAB_DIR, "scripts/lwallac2/R/FLT3-ITD Analysis for Soheil/TARGET_AML_RBD_Dx_Rlps_NBM_MPN_JMML_APL_DS_MDAnderson_Kallisto_Quant_GeneLevel_dupGenesRemoved_Abundance_TPM.RDS"))
View(CDE)
# Sort the CDE for patients with KAT6A::X or CBF::GLIS
CDE <- CDE %>% filter(grepl("KAT6A", `Primary Fusion`))
View(CDE)
CDE$`Primary Fusion`
# Filter these patients in the counts data
# Grep for the CDE USIs within the colnames of the counts data
ctsTPM <- ctsTPM[, grepl(paste0(CDE$USI, collapse = "|"), colnames(ctsTPM))]
View(ctsTPM)
# Filter for the genes of interest
ctsTPM <- ctsTPM %>% filter(grepl("FOLR1|CD276|CD56", ctsTPM$gene_symbol))
View(ctsTPM)
# Import the clinical data elements
CDE <- read_xlsx(file.path(LAB_DIR, "/scripts/Common_Data/TARGETClinicalDataEl_DATA_LABELS_2022-03-30_1445_updated_Jan2024_w_1831_proposed_changes.xlsx"))
# Import the gene expression data
ctsTPM <- readRDS(file.path(LAB_DIR, "scripts/lwallac2/R/FLT3-ITD Analysis for Soheil/TARGET_AML_RBD_Dx_Rlps_NBM_MPN_JMML_APL_DS_MDAnderson_Kallisto_Quant_GeneLevel_dupGenesRemoved_Abundance_TPM.RDS"))
# Cast the genes to row names
rownames(ctsTPM) <- ctsTPM$gene_symbol
# Sort the CDE for patients with KAT6A::X or CBF::GLIS
CDE <- CDE %>% filter(grepl("KAT6A", `Primary Fusion`))
# Filter these patients in the counts data
# Grep for the CDE USIs within the colnames of the counts data
ctsTPM <- ctsTPM[, grepl(paste0(CDE$USI, collapse = "|"), colnames(ctsTPM))]
# Filter for the genes of interest
ctsTPM <- ctsTPM %>% filter(grepl("FOLR1|CD276|CD56", ctsTPM$gene_symbol))
# Import the clinical data elements
CDE <- read_xlsx(file.path(LAB_DIR, "/scripts/Common_Data/TARGETClinicalDataEl_DATA_LABELS_2022-03-30_1445_updated_Jan2024_w_1831_proposed_changes.xlsx"))
# Import the gene expression data
ctsTPM <- readRDS(file.path(LAB_DIR, "scripts/lwallac2/R/FLT3-ITD Analysis for Soheil/TARGET_AML_RBD_Dx_Rlps_NBM_MPN_JMML_APL_DS_MDAnderson_Kallisto_Quant_GeneLevel_dupGenesRemoved_Abundance_TPM.RDS"))
# Cast the genes to row names
rownames(ctsTPM) <- ctsTPM$gene_symbol
# Sort the CDE for patients with KAT6A::X or CBF::GLIS
CDE <- CDE %>% filter(grepl("KAT6A", `Primary Fusion`))
# Filter these patients in the counts data
# Grep for the CDE USIs within the colnames of the counts data
ctsTPM <- ctsTPM[, grepl(paste0(CDE$USI, collapse = "|"), colnames(ctsTPM))]
# Filter for the genes of interest
ctsTPM <- ctsTPM %>% filter(grepl("FOLR1|CD276|CD56", rownames(ctsTPM)))
# Import the clinical data elements
CDE <- read_xlsx(file.path(LAB_DIR, "/scripts/Common_Data/TARGETClinicalDataEl_DATA_LABELS_2022-03-30_1445_updated_Jan2024_w_1831_proposed_changes.xlsx"))
# Import the gene expression data
ctsTPM <- readRDS(file.path(LAB_DIR, "scripts/lwallac2/R/FLT3-ITD Analysis for Soheil/TARGET_AML_RBD_Dx_Rlps_NBM_MPN_JMML_APL_DS_MDAnderson_Kallisto_Quant_GeneLevel_dupGenesRemoved_Abundance_TPM.RDS"))
# Cast the genes to row names
rownames(ctsTPM) <- ctsTPM$gene_symbol
# Sort the CDE for patients with KAT6A::X or CBF::GLIS
CDE <- CDE %>% filter(grepl("KAT6A", `Primary Fusion`))
# Filter these patients in the counts data
# Grep for the CDE USIs within the colnames of the counts data
ctsTPM <- ctsTPM[, grepl(paste0(CDE$USI, collapse = "|"), colnames(ctsTPM))]
# Filter for the genes of interest
ctsTPM <- ctsTPM[("FOLR1", "CD276", "CD56"), ]
View(ctsTPM)
# Import the clinical data elements
CDE <- read_xlsx(file.path(LAB_DIR, "/scripts/Common_Data/TARGETClinicalDataEl_DATA_LABELS_2022-03-30_1445_updated_Jan2024_w_1831_proposed_changes.xlsx"))
# Import the gene expression data
ctsTPM <- readRDS(file.path(LAB_DIR, "scripts/lwallac2/R/FLT3-ITD Analysis for Soheil/TARGET_AML_RBD_Dx_Rlps_NBM_MPN_JMML_APL_DS_MDAnderson_Kallisto_Quant_GeneLevel_dupGenesRemoved_Abundance_TPM.RDS"))
View(ctsTPM)
# Cast the genes to row names
rownames(ctsTPM) <- ctsTPM$gene_name
View(ctsTPM)
# Sort the CDE for patients with KAT6A::X or CBF::GLIS
CDE <- CDE %>% filter(grepl("KAT6A", `Primary Fusion`))
# Filter these patients in the counts data
# Grep for the CDE USIs within the colnames of the counts data
ctsTPM <- ctsTPM[, grepl(paste0(CDE$USI, collapse = "|"), colnames(ctsTPM))]
# Filter for the genes of interest
ctsTPM <- ctsTPM[("FOLR1", "CD276", "CD56"), ]
# Filter for the genes of interest
ctsTPM <- ctsTPM[c("FOLR1", "CD276", "CD56"), ]
View(ctsTPM)
# Transpose and order
ctsTPM <- as.data.frame(t(ctsTPM))
View(ctsTPM)
library(tidyverse)
library(readxl)
library(xlsx)
library(ComplexHeatmap)
library(readxl)
library(hutchpalette)
# Import the clinical data elements
CDE <- read_xlsx(file.path(LAB_DIR, "/scripts/Common_Data/TARGETClinicalDataEl_DATA_LABELS_2022-03-30_1445_updated_Jan2024_w_1831_proposed_changes.xlsx"))
# Import the clinical data elements
CDE <- read_xlsx(file.path(LAB_DIR, "scripts/Common_Data/TARGETClinicalDataEl_DATA_LABELS_2022-03-30_1445_updated_Jan2024_w_1831_proposed_changes.xlsx"))
knitr::opts_chunk$set(echo = FALSE)
if (grepl("gizmo", Sys.info()[4])) {
LAB_DIR <- file.path("/fh/fast/meshinchi_s/")
HOME_DIR <- "~"
} else {
LAB_DIR <- file.path("/Volumes/fh/fast/meshinchi_s/workingDir")
HOME_DIR <- file.path("/Volumes/homes")
}
library(tidyverse)
library(readxl)
library(xlsx)
library(ComplexHeatmap)
library(readxl)
library(hutchpalette)
# Import the clinical data elements
CDE <- read_xlsx(file.path(LAB_DIR, "scripts/Common_Data/TARGETClinicalDataEl_DATA_LABELS_2022-03-30_1445_updated_Jan2024_w_1831_proposed_changes.xlsx"))
knitr::opts_chunk$set(echo = FALSE)
if (grepl("gizmo", Sys.info()[4])) {
LAB_DIR <- file.path("/fh/fast/meshinchi_s/")
HOME_DIR <- "~"
} else {
LAB_DIR <- file.path("/Volumes/fh-1/fast/meshinchi_s/workingDir")
HOME_DIR <- file.path("/Volumes/homes")
}
# Import the clinical data elements
CDE <- read_xlsx(file.path(LAB_DIR, "scripts/Common_Data/TARGETClinicalDataEl_DATA_LABELS_2022-03-30_1445_updated_Jan2024_w_1831_proposed_changes.xlsx"))
# Import the gene expression data
ctsTPM <- readRDS(file.path(LAB_DIR, "scripts/lwallac2/R/FLT3-ITD Analysis for Soheil/TARGET_AML_RBD_Dx_Rlps_NBM_MPN_JMML_APL_DS_MDAnderson_Kallisto_Quant_GeneLevel_dupGenesRemoved_Abundance_TPM.RDS"))
View(CDE)
grep("Mutation", colnames(CDE))
colnames(CDE)[(72:76)]
grep("Mut", colnames(CDE))
grep("Primary", colnames(CDE))
colnames(CDE)[(56)]
colnames(CDE)[(57)]
colnames(CDE)[(100)]
grep("mut", colnames(CDE))
colnames(CDE)[(65:70)]
colnames(CDE)[(83:93)]
grep("GATA", colnames(CDE))
colnames(CDE)[(77)]
# Import the manifest
manifest <- read_csv(file.path(LAB_DIR, "scripts/Common_Data/TARGET_AML_Ribodepleted_and_PolyA_RNAseq_Bam_Manifest_08.12.21.csv"))
View(manifest)
unique(manifest$Primary.CNV
))
)
unique(manifest$Primary.CNV)
unique(manifest$AML_Subtype)
setwd("/Volumes/fh/fast/meshinchi_s/workingDir/scripts/lwallac2/R/target-data-viz")
shiny::runApp()
runApp()
runApp()
runApp()
View(wfPlot)
View(geneExp)
View(target_cde)
runApp()
runApp()
